//
// OrderFilter.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class OrderFilter: Codable {

    public enum Statuses: String, Codable { 
        case inProgress = "IN_PROGRESS"
        case shipped = "SHIPPED"
        case inBackorder = "IN_BACKORDER"
        case canceled = "CANCELED"
        case manco = "MANCO"
        case inCombi = "IN_COMBI"
        case closed = "CLOSED"
        case new = "NEW"
        case returned = "RETURNED"
        case requiresCorrection = "REQUIRES_CORRECTION"
    }
    public enum FulfillmentType: String, Codable { 
        case all = "ALL"
        case onlyMerchant = "ONLY_MERCHANT"
        case onlyChannel = "ONLY_CHANNEL"
        case mixed = "MIXED"
    }
    public var statuses: [Statuses]?
    public var merchantOrderNos: [String]?
    public var excludeMarketplaceFulfilledOrdersAndLines: Bool?
    /** Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.  To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. */
    public var fulfillmentType: FulfillmentType?
    public var page: Int?


    
    public init(statuses: [Statuses]?, merchantOrderNos: [String]?, excludeMarketplaceFulfilledOrdersAndLines: Bool?, fulfillmentType: FulfillmentType?, page: Int?) {
        self.statuses = statuses
        self.merchantOrderNos = merchantOrderNos
        self.excludeMarketplaceFulfilledOrdersAndLines = excludeMarketplaceFulfilledOrdersAndLines
        self.fulfillmentType = fulfillmentType
        self.page = page
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(statuses, forKey: "Statuses")
        try container.encodeIfPresent(merchantOrderNos, forKey: "MerchantOrderNos")
        try container.encodeIfPresent(excludeMarketplaceFulfilledOrdersAndLines, forKey: "ExcludeMarketplaceFulfilledOrdersAndLines")
        try container.encodeIfPresent(fulfillmentType, forKey: "FulfillmentType")
        try container.encodeIfPresent(page, forKey: "Page")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        statuses = try container.decodeIfPresent([Statuses].self, forKey: "Statuses")
        merchantOrderNos = try container.decodeIfPresent([String].self, forKey: "MerchantOrderNos")
        excludeMarketplaceFulfilledOrdersAndLines = try container.decodeIfPresent(Bool.self, forKey: "ExcludeMarketplaceFulfilledOrdersAndLines")
        fulfillmentType = try container.decodeIfPresent(FulfillmentType.self, forKey: "FulfillmentType")
        page = try container.decodeIfPresent(Int.self, forKey: "Page")
    }
}

