//
// EntitiesAddressModels.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class EntitiesAddressModels: Codable {

    public enum Gender: String, Codable { 
        case male = "MALE"
        case female = "FEMALE"
        case notApplicable = "NOT_APPLICABLE"
    }
    public var gender: Gender?
    public var companyName: String?
    public var firstName: String?
    public var lastName: String?
    public var streetName: String?
    public var houseNr: String?
    public var houseNrAddition: String?
    public var zipCode: String?
    public var city: String?
    public var region: String?
    public var countryIso: String?
    public var original: String?


    
    public init(gender: Gender?, companyName: String?, firstName: String?, lastName: String?, streetName: String?, houseNr: String?, houseNrAddition: String?, zipCode: String?, city: String?, region: String?, countryIso: String?, original: String?) {
        self.gender = gender
        self.companyName = companyName
        self.firstName = firstName
        self.lastName = lastName
        self.streetName = streetName
        self.houseNr = houseNr
        self.houseNrAddition = houseNrAddition
        self.zipCode = zipCode
        self.city = city
        self.region = region
        self.countryIso = countryIso
        self.original = original
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(gender, forKey: "Gender")
        try container.encodeIfPresent(companyName, forKey: "CompanyName")
        try container.encodeIfPresent(firstName, forKey: "FirstName")
        try container.encodeIfPresent(lastName, forKey: "LastName")
        try container.encodeIfPresent(streetName, forKey: "StreetName")
        try container.encodeIfPresent(houseNr, forKey: "HouseNr")
        try container.encodeIfPresent(houseNrAddition, forKey: "HouseNrAddition")
        try container.encodeIfPresent(zipCode, forKey: "ZipCode")
        try container.encodeIfPresent(city, forKey: "City")
        try container.encodeIfPresent(region, forKey: "Region")
        try container.encodeIfPresent(countryIso, forKey: "CountryIso")
        try container.encodeIfPresent(original, forKey: "Original")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        gender = try container.decodeIfPresent(Gender.self, forKey: "Gender")
        companyName = try container.decodeIfPresent(String.self, forKey: "CompanyName")
        firstName = try container.decodeIfPresent(String.self, forKey: "FirstName")
        lastName = try container.decodeIfPresent(String.self, forKey: "LastName")
        streetName = try container.decodeIfPresent(String.self, forKey: "StreetName")
        houseNr = try container.decodeIfPresent(String.self, forKey: "HouseNr")
        houseNrAddition = try container.decodeIfPresent(String.self, forKey: "HouseNrAddition")
        zipCode = try container.decodeIfPresent(String.self, forKey: "ZipCode")
        city = try container.decodeIfPresent(String.self, forKey: "City")
        region = try container.decodeIfPresent(String.self, forKey: "Region")
        countryIso = try container.decodeIfPresent(String.self, forKey: "CountryIso")
        original = try container.decodeIfPresent(String.self, forKey: "Original")
    }
}

