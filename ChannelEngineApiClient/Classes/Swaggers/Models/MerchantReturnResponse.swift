//
// MerchantReturnResponse.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class MerchantReturnResponse: Codable {

    public enum Reason: String, Codable { 
        case productDefect = "PRODUCT_DEFECT"
        case productUnsatisfactory = "PRODUCT_UNSATISFACTORY"
        case refused = "REFUSED"
        case refusedDamaged = "REFUSED_DAMAGED"
        case wrongAddress = "WRONG_ADDRESS"
        case notCollected = "NOT_COLLECTED"
        case other = "OTHER"
    }
    public var merchantOrderNo: String?
    public var lines: [MerchantReturnLineResponse]?
    public var reason: Reason?
    public var customerComment: String?
    public var merchantComment: String?
    public var refundInclVat: Double?
    public var refundExclVat: Double?


    
    public init(merchantOrderNo: String?, lines: [MerchantReturnLineResponse]?, reason: Reason?, customerComment: String?, merchantComment: String?, refundInclVat: Double?, refundExclVat: Double?) {
        self.merchantOrderNo = merchantOrderNo
        self.lines = lines
        self.reason = reason
        self.customerComment = customerComment
        self.merchantComment = merchantComment
        self.refundInclVat = refundInclVat
        self.refundExclVat = refundExclVat
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(merchantOrderNo, forKey: "MerchantOrderNo")
        try container.encodeIfPresent(lines, forKey: "Lines")
        try container.encodeIfPresent(reason, forKey: "Reason")
        try container.encodeIfPresent(customerComment, forKey: "CustomerComment")
        try container.encodeIfPresent(merchantComment, forKey: "MerchantComment")
        try container.encodeIfPresent(refundInclVat, forKey: "RefundInclVat")
        try container.encodeIfPresent(refundExclVat, forKey: "RefundExclVat")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        merchantOrderNo = try container.decodeIfPresent(String.self, forKey: "MerchantOrderNo")
        lines = try container.decodeIfPresent([MerchantReturnLineResponse].self, forKey: "Lines")
        reason = try container.decodeIfPresent(Reason.self, forKey: "Reason")
        customerComment = try container.decodeIfPresent(String.self, forKey: "CustomerComment")
        merchantComment = try container.decodeIfPresent(String.self, forKey: "MerchantComment")
        refundInclVat = try container.decodeIfPresent(Double.self, forKey: "RefundInclVat")
        refundExclVat = try container.decodeIfPresent(Double.self, forKey: "RefundExclVat")
    }
}

