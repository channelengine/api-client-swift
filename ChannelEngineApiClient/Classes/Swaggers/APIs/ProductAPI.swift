//
// ProductAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ProductAPI {
    /**
     Channel: Acknowledge Product Data Changes
     
     - parameter changes: (body) The merchant references of the products which have been                successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productAcknowledgeDataChanges(changes: ChannelProcessedChangesRequest, completion: @escaping ((_ data: ApiResponse?,_ error: Error?) -> Void)) {
        productAcknowledgeDataChangesWithRequestBuilder(changes: changes).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Channel: Acknowledge Product Data Changes
     - POST /v2/products/data
     - For channels.                This endpoint should be called after a call to GET 'v2/products/data'. After a call to  this endpoint ChannelEngine 'knows' which products are known to the channel (and the last  time they have been updated) and is therefore able to only return the products  that really have changed since the last call to POST 'v2/products/data'.  The supplied ChannelReturnNo will be saved  in our database and is supposed to be unique, the 'Updated' and 'Removed'  fields consist of ChannelReferences which are sent in a previous call  within the field 'Created'.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apikey
     - examples: [{contentType=application/json, example={
  "Message" : "Message",
  "ValidationErrors" : {
    "key" : [ "ValidationErrors", "ValidationErrors" ]
  },
  "StatusCode" : 0,
  "Success" : true
}}]
     
     - parameter changes: (body) The merchant references of the products which have been                successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;) 

     - returns: RequestBuilder<ApiResponse> 
     */
    open class func productAcknowledgeDataChangesWithRequestBuilder(changes: ChannelProcessedChangesRequest) -> RequestBuilder<ApiResponse> {
        let path = "/v2/products/data"
        let URLString = ChannelEngineApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: changes)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ApiResponse>.Type = ChannelEngineApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Channel: Acknowledge Product Offer Changes
     
     - parameter changes: (body) The channel references of the updated products 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productAcknowledgeOfferChanges(changes: [String], completion: @escaping ((_ data: ApiResponse?,_ error: Error?) -> Void)) {
        productAcknowledgeOfferChangesWithRequestBuilder(changes: changes).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Channel: Acknowledge Product Offer Changes
     - POST /v2/products/offers
     - For channels.                After a call to GET 'v2/products/offers' this endpoint should be called with the  ChannelReturnNo of the products that are successfully updated.  Please see 'v2/products/data' and 'v2/products/data' for documentation.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apikey
     - examples: [{contentType=application/json, example={
  "Message" : "Message",
  "ValidationErrors" : {
    "key" : [ "ValidationErrors", "ValidationErrors" ]
  },
  "StatusCode" : 0,
  "Success" : true
}}]
     
     - parameter changes: (body) The channel references of the updated products 

     - returns: RequestBuilder<ApiResponse> 
     */
    open class func productAcknowledgeOfferChangesWithRequestBuilder(changes: [String]) -> RequestBuilder<ApiResponse> {
        let path = "/v2/products/offers"
        let URLString = ChannelEngineApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: changes)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ApiResponse>.Type = ChannelEngineApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Merchant: Upsert Products
     
     - parameter products: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productCreate(products: [MerchantProductRequest], completion: @escaping ((_ data: SingleOfProductCreationResult?,_ error: Error?) -> Void)) {
        productCreateWithRequestBuilder(products: products).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Merchant: Upsert Products
     - POST /v2/products
     - For merchants.    Upsert (update or create) products. The parent serves as the 'base' product of the children.  For example, the children could be different sizes or colors of the parent product.  For channels where every size and color are different products this does not make any difference  (the children will just be sent separately, while ignoring the parent).  But there are channels where the parent and the children need to be sent together, for example  when there is one product with a list of sizes. In this case all the product information is retrieved  from the parent product while the size list is generated from the children.    Note that the parent itself is a 'blueprint' of the child products and we do our best to make sure it  does not end up on the marketplaces itself. Only the children can be purchased.    It's not possible to nest parent and children more than one level (A parent can have many children,  but any child cannot itself also have children).    The supplied MerchantProductNo needs to be unique.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apikey
     - examples: [{contentType=application/json, example={
  "Message" : "Message",
  "ValidationErrors" : {
    "key" : [ "ValidationErrors", "ValidationErrors" ]
  },
  "Content" : {
    "AcceptedCount" : 6,
    "RejectedCount" : 0,
    "ProductMessages" : [ {
      "Errors" : [ "Errors", "Errors" ],
      "Reference" : "Reference",
      "Warnings" : [ "Warnings", "Warnings" ],
      "Name" : "Name"
    }, {
      "Errors" : [ "Errors", "Errors" ],
      "Reference" : "Reference",
      "Warnings" : [ "Warnings", "Warnings" ],
      "Name" : "Name"
    } ]
  },
  "StatusCode" : 1,
  "Success" : true
}}]
     
     - parameter products: (body)  

     - returns: RequestBuilder<SingleOfProductCreationResult> 
     */
    open class func productCreateWithRequestBuilder(products: [MerchantProductRequest]) -> RequestBuilder<SingleOfProductCreationResult> {
        let path = "/v2/products"
        let URLString = ChannelEngineApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: products)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SingleOfProductCreationResult>.Type = ChannelEngineApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Merchant: Delete Product
     
     - parameter merchantProductNo: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productDelete(merchantProductNo: String, completion: @escaping ((_ data: ApiResponse?,_ error: Error?) -> Void)) {
        productDeleteWithRequestBuilder(merchantProductNo: merchantProductNo).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Merchant: Delete Product
     - DELETE /v2/products/{merchantProductNo}
     - For merchants.    Delete a product based on the merchant reference.  Note that we do not really delete a product, as the product  might still be referenced by orders etc. Therefore, the references  used for this product cannot be reused. We do however deactivate the product  which means that it will not be sent to channels.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apikey
     - examples: [{contentType=application/json, example={
  "Message" : "Message",
  "ValidationErrors" : {
    "key" : [ "ValidationErrors", "ValidationErrors" ]
  },
  "StatusCode" : 0,
  "Success" : true
}}]
     
     - parameter merchantProductNo: (path)  

     - returns: RequestBuilder<ApiResponse> 
     */
    open class func productDeleteWithRequestBuilder(merchantProductNo: String) -> RequestBuilder<ApiResponse> {
        var path = "/v2/products/{merchantProductNo}"
        let merchantProductNoPreEscape = "\(merchantProductNo)"
        let merchantProductNoPostEscape = merchantProductNoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{merchantProductNo}", with: merchantProductNoPostEscape, options: .literal, range: nil)
        let URLString = ChannelEngineApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ApiResponse>.Type = ChannelEngineApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Merchant: Get Product
     
     - parameter merchantProductNo: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productGetByMerchantProductNo(merchantProductNo: String, completion: @escaping ((_ data: SingleOfMerchantProductResponse?,_ error: Error?) -> Void)) {
        productGetByMerchantProductNoWithRequestBuilder(merchantProductNo: merchantProductNo).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Merchant: Get Product
     - GET /v2/products/merchant/{merchantProductNo}
     - For merchants.    Retrieve a product based on the merchant reference.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apikey
     - examples: [{contentType=application/json, example={
  "Message" : "Message",
  "ValidationErrors" : {
    "key" : [ "ValidationErrors", "ValidationErrors" ]
  },
  "Content" : {
    "MSRP" : 1.4658129805029452,
    "Description" : "Description",
    "IsActive" : true,
    "Size" : "Size",
    "PurchasePrice" : 5.962133916683182,
    "Url" : "Url",
    "Name" : "Name",
    "VatRateType" : "STANDARD",
    "ExtraImageUrl9" : "ExtraImageUrl9",
    "ExtraImageUrl8" : "ExtraImageUrl8",
    "ExtraImageUrl7" : "ExtraImageUrl7",
    "ExtraImageUrl6" : "ExtraImageUrl6",
    "ExtraImageUrl5" : "ExtraImageUrl5",
    "Color" : "Color",
    "ExtraImageUrl4" : "ExtraImageUrl4",
    "ImageUrl" : "ImageUrl",
    "ManufacturerProductNumber" : "ManufacturerProductNumber",
    "ExtraData" : [ {
      "Type" : "TEXT",
      "IsPublic" : true,
      "Value" : "Value",
      "Key" : "Key"
    }, {
      "Type" : "TEXT",
      "IsPublic" : true,
      "Value" : "Value",
      "Key" : "Key"
    } ],
    "Brand" : "Brand",
    "ShippingTime" : "ShippingTime",
    "Ean" : "Ean",
    "Price" : 6.027456183070403,
    "ShippingCost" : 5.637376656633329,
    "ExtraImageUrl3" : "ExtraImageUrl3",
    "ExtraImageUrl2" : "ExtraImageUrl2",
    "ExtraImageUrl1" : "ExtraImageUrl1",
    "CategoryTrail" : "CategoryTrail",
    "Stock" : 0
  },
  "StatusCode" : 2,
  "Success" : true
}}]
     
     - parameter merchantProductNo: (path)  

     - returns: RequestBuilder<SingleOfMerchantProductResponse> 
     */
    open class func productGetByMerchantProductNoWithRequestBuilder(merchantProductNo: String) -> RequestBuilder<SingleOfMerchantProductResponse> {
        var path = "/v2/products/merchant/{merchantProductNo}"
        let merchantProductNoPreEscape = "\(merchantProductNo)"
        let merchantProductNoPostEscape = merchantProductNoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{merchantProductNo}", with: merchantProductNoPostEscape, options: .literal, range: nil)
        let URLString = ChannelEngineApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SingleOfMerchantProductResponse>.Type = ChannelEngineApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Channel: Get Product Data Changes
     
     - parameter maxCount: (query) Optional - limit the amount of products returned for each field              (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productGetDataChanges(maxCount: Int? = nil, completion: @escaping ((_ data: SingleOfChannelProductChangesResponse?,_ error: Error?) -> Void)) {
        productGetDataChangesWithRequestBuilder(maxCount: maxCount).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Channel: Get Product Data Changes
     - GET /v2/products/data
     - For channels.    Get all products which have changes since the post http call to POST 'v2/products/data'.  The response contains the products which should be created, updated or removed from the channel.  After the products have been received and processed successfully 'v2/products/data' should  be called with the merchant references of the products which have been processed (see POST 'v2/products/data').   ChannelEnginewill save this information to make sure that the next call to GET 'v2/products/data' only returns the  products that really have changes (and therefore should be created, updated or deleted).  A channel willing to integrate with channelengine should therefore only do the following things:      1. Periodically poll 'v2/products/data' for changes.      2. If any products are returned, save, update or remove these products.      3. Send the merchant references of the products that have succesfully been processed      in step 2 to POST 'v2/products/data'.       These three simple steps will make sure that the products on the channel will be synchronized   with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer  whose products should be returned. Note that child products are only returned if their parent product  has been acknowledged in a previous transaction. This way ChannelEngine knows the value of   'ChannelParentReference'.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apikey
     - examples: [{contentType=application/json, example={
  "Message" : "Message",
  "ValidationErrors" : {
    "key" : [ "ValidationErrors", "ValidationErrors" ]
  },
  "Content" : {
    "ToBeUpdated" : [ {
      "MSRP" : 5.962133916683182,
      "Description" : "Description",
      "Size" : "Size",
      "PurchasePrice" : 5.637376656633329,
      "Url" : "Url",
      "Name" : "Name",
      "VatRateType" : "STANDARD",
      "ParentChannelProductNo" : "ParentChannelProductNo",
      "ExtraImageUrl9" : "ExtraImageUrl9",
      "ExtraImageUrl8" : "ExtraImageUrl8",
      "ExtraImageUrl7" : "ExtraImageUrl7",
      "ExtraImageUrl6" : "ExtraImageUrl6",
      "ExtraImageUrl5" : "ExtraImageUrl5",
      "Color" : "Color",
      "ExtraImageUrl4" : "ExtraImageUrl4",
      "ImageUrl" : "ImageUrl",
      "ManufacturerProductNumber" : "ManufacturerProductNumber",
      "ExtraData" : [ {
        "Type" : "TEXT",
        "IsPublic" : true,
        "Value" : "Value",
        "Key" : "Key"
      }, {
        "Type" : "TEXT",
        "IsPublic" : true,
        "Value" : "Value",
        "Key" : "Key"
      } ],
      "Brand" : "Brand",
      "ShippingTime" : "ShippingTime",
      "Ean" : "Ean",
      "MappedFields" : {
        "key" : "MappedFields"
      },
      "Price" : 1.4658129805029452,
      "ShippingCost" : 2.3021358869347655,
      "ExtraImageUrl3" : "ExtraImageUrl3",
      "ExtraImageUrl2" : "ExtraImageUrl2",
      "ExtraImageUrl1" : "ExtraImageUrl1",
      "Id" : 0,
      "CategoryTrail" : "CategoryTrail",
      "Stock" : 6
    }, {
      "MSRP" : 5.962133916683182,
      "Description" : "Description",
      "Size" : "Size",
      "PurchasePrice" : 5.637376656633329,
      "Url" : "Url",
      "Name" : "Name",
      "VatRateType" : "STANDARD",
      "ParentChannelProductNo" : "ParentChannelProductNo",
      "ExtraImageUrl9" : "ExtraImageUrl9",
      "ExtraImageUrl8" : "ExtraImageUrl8",
      "ExtraImageUrl7" : "ExtraImageUrl7",
      "ExtraImageUrl6" : "ExtraImageUrl6",
      "ExtraImageUrl5" : "ExtraImageUrl5",
      "Color" : "Color",
      "ExtraImageUrl4" : "ExtraImageUrl4",
      "ImageUrl" : "ImageUrl",
      "ManufacturerProductNumber" : "ManufacturerProductNumber",
      "ExtraData" : [ {
        "Type" : "TEXT",
        "IsPublic" : true,
        "Value" : "Value",
        "Key" : "Key"
      }, {
        "Type" : "TEXT",
        "IsPublic" : true,
        "Value" : "Value",
        "Key" : "Key"
      } ],
      "Brand" : "Brand",
      "ShippingTime" : "ShippingTime",
      "Ean" : "Ean",
      "MappedFields" : {
        "key" : "MappedFields"
      },
      "Price" : 1.4658129805029452,
      "ShippingCost" : 2.3021358869347655,
      "ExtraImageUrl3" : "ExtraImageUrl3",
      "ExtraImageUrl2" : "ExtraImageUrl2",
      "ExtraImageUrl1" : "ExtraImageUrl1",
      "Id" : 0,
      "CategoryTrail" : "CategoryTrail",
      "Stock" : 6
    } ],
    "ToBeRemoved" : [ "ToBeRemoved", "ToBeRemoved" ],
    "ToBeCreated" : [ {
      "MSRP" : 5.962133916683182,
      "Description" : "Description",
      "Size" : "Size",
      "PurchasePrice" : 5.637376656633329,
      "Url" : "Url",
      "Name" : "Name",
      "VatRateType" : "STANDARD",
      "ParentChannelProductNo" : "ParentChannelProductNo",
      "ExtraImageUrl9" : "ExtraImageUrl9",
      "ExtraImageUrl8" : "ExtraImageUrl8",
      "ExtraImageUrl7" : "ExtraImageUrl7",
      "ExtraImageUrl6" : "ExtraImageUrl6",
      "ExtraImageUrl5" : "ExtraImageUrl5",
      "Color" : "Color",
      "ExtraImageUrl4" : "ExtraImageUrl4",
      "ImageUrl" : "ImageUrl",
      "ManufacturerProductNumber" : "ManufacturerProductNumber",
      "ExtraData" : [ {
        "Type" : "TEXT",
        "IsPublic" : true,
        "Value" : "Value",
        "Key" : "Key"
      }, {
        "Type" : "TEXT",
        "IsPublic" : true,
        "Value" : "Value",
        "Key" : "Key"
      } ],
      "Brand" : "Brand",
      "ShippingTime" : "ShippingTime",
      "Ean" : "Ean",
      "MappedFields" : {
        "key" : "MappedFields"
      },
      "Price" : 1.4658129805029452,
      "ShippingCost" : 2.3021358869347655,
      "ExtraImageUrl3" : "ExtraImageUrl3",
      "ExtraImageUrl2" : "ExtraImageUrl2",
      "ExtraImageUrl1" : "ExtraImageUrl1",
      "Id" : 0,
      "CategoryTrail" : "CategoryTrail",
      "Stock" : 6
    }, {
      "MSRP" : 5.962133916683182,
      "Description" : "Description",
      "Size" : "Size",
      "PurchasePrice" : 5.637376656633329,
      "Url" : "Url",
      "Name" : "Name",
      "VatRateType" : "STANDARD",
      "ParentChannelProductNo" : "ParentChannelProductNo",
      "ExtraImageUrl9" : "ExtraImageUrl9",
      "ExtraImageUrl8" : "ExtraImageUrl8",
      "ExtraImageUrl7" : "ExtraImageUrl7",
      "ExtraImageUrl6" : "ExtraImageUrl6",
      "ExtraImageUrl5" : "ExtraImageUrl5",
      "Color" : "Color",
      "ExtraImageUrl4" : "ExtraImageUrl4",
      "ImageUrl" : "ImageUrl",
      "ManufacturerProductNumber" : "ManufacturerProductNumber",
      "ExtraData" : [ {
        "Type" : "TEXT",
        "IsPublic" : true,
        "Value" : "Value",
        "Key" : "Key"
      }, {
        "Type" : "TEXT",
        "IsPublic" : true,
        "Value" : "Value",
        "Key" : "Key"
      } ],
      "Brand" : "Brand",
      "ShippingTime" : "ShippingTime",
      "Ean" : "Ean",
      "MappedFields" : {
        "key" : "MappedFields"
      },
      "Price" : 1.4658129805029452,
      "ShippingCost" : 2.3021358869347655,
      "ExtraImageUrl3" : "ExtraImageUrl3",
      "ExtraImageUrl2" : "ExtraImageUrl2",
      "ExtraImageUrl1" : "ExtraImageUrl1",
      "Id" : 0,
      "CategoryTrail" : "CategoryTrail",
      "Stock" : 6
    } ]
  },
  "StatusCode" : 7,
  "Success" : true
}}]
     
     - parameter maxCount: (query) Optional - limit the amount of products returned for each field              (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)

     - returns: RequestBuilder<SingleOfChannelProductChangesResponse> 
     */
    open class func productGetDataChangesWithRequestBuilder(maxCount: Int? = nil) -> RequestBuilder<SingleOfChannelProductChangesResponse> {
        let path = "/v2/products/data"
        let URLString = ChannelEngineApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "maxCount": maxCount?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<SingleOfChannelProductChangesResponse>.Type = ChannelEngineApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Channel: Get Product Offer Changes
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productGetOfferChanges(completion: @escaping ((_ data: CollectionOfChannelOfferResponse?,_ error: Error?) -> Void)) {
        productGetOfferChangesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Channel: Get Product Offer Changes
     - GET /v2/products/offers
     - For channels.                GET 'v2/products/offers' and POST 'v2/products/offers' closely resemble GET 'v2/products/data' and POST 'v2/products/data'. See the 'v2/products/data'  endpoints for documentation. The difference between both endpoints is that 'v2/products/offers' only returns Price and Stock updates and can (and should)  therefore be called more often to keep this information (which might change frequently) up to date.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apikey
     - examples: [{contentType=application/json, example={
  "TotalCount" : 5,
  "Message" : "Message",
  "ValidationErrors" : {
    "key" : [ "ValidationErrors", "ValidationErrors" ]
  },
  "Content" : [ {
    "Price" : 0.8008281904610115,
    "Stock" : 6,
    "ChannelProductNo" : "ChannelProductNo"
  }, {
    "Price" : 0.8008281904610115,
    "Stock" : 6,
    "ChannelProductNo" : "ChannelProductNo"
  } ],
  "ItemsPerPage" : 5,
  "Count" : 1,
  "StatusCode" : 2,
  "Success" : true
}}]

     - returns: RequestBuilder<CollectionOfChannelOfferResponse> 
     */
    open class func productGetOfferChangesWithRequestBuilder() -> RequestBuilder<CollectionOfChannelOfferResponse> {
        let path = "/v2/products/offers"
        let URLString = ChannelEngineApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CollectionOfChannelOfferResponse>.Type = ChannelEngineApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
