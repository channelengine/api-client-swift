//
// ShipmentAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class ShipmentAPI {
    /**
     Create Shipment.
     
     - parameter merchantShipmentRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func shipmentCreate(merchantShipmentRequest: MerchantShipmentRequest? = nil, apiResponseQueue: DispatchQueue = ChannelEngineMerchantApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApiResponse?,_ error: Error?) -> Void)) {
        shipmentCreateWithRequestBuilder(merchantShipmentRequest: merchantShipmentRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Shipment.
     - POST /v2/shipments
     - Mark (part of) an order as shipped.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apiKey
     - parameter merchantShipmentRequest: (body)  (optional)
     - returns: RequestBuilder<ApiResponse> 
     */
    open class func shipmentCreateWithRequestBuilder(merchantShipmentRequest: MerchantShipmentRequest? = nil) -> RequestBuilder<ApiResponse> {
        let path = "/v2/shipments"
        let URLString = ChannelEngineMerchantApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: merchantShipmentRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ApiResponse>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update Shipment.
     
     - parameter merchantShipmentNo: (path) The merchant&#39;s shipment reference. 
     - parameter merchantShipmentTrackingRequest: (body) The updated tracking information. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func shipmentUpdate(merchantShipmentNo: String, merchantShipmentTrackingRequest: MerchantShipmentTrackingRequest? = nil, apiResponseQueue: DispatchQueue = ChannelEngineMerchantApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApiResponse?,_ error: Error?) -> Void)) {
        shipmentUpdateWithRequestBuilder(merchantShipmentNo: merchantShipmentNo, merchantShipmentTrackingRequest: merchantShipmentTrackingRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Shipment.
     - PUT /v2/shipments/{merchantShipmentNo}
     - Update an existing shipment with tracking information.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apiKey
     - parameter merchantShipmentNo: (path) The merchant&#39;s shipment reference. 
     - parameter merchantShipmentTrackingRequest: (body) The updated tracking information. (optional)
     - returns: RequestBuilder<ApiResponse> 
     */
    open class func shipmentUpdateWithRequestBuilder(merchantShipmentNo: String, merchantShipmentTrackingRequest: MerchantShipmentTrackingRequest? = nil) -> RequestBuilder<ApiResponse> {
        var path = "/v2/shipments/{merchantShipmentNo}"
        let merchantShipmentNoPreEscape = "\(APIHelper.mapValueToPathItem(merchantShipmentNo))"
        let merchantShipmentNoPostEscape = merchantShipmentNoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{merchantShipmentNo}", with: merchantShipmentNoPostEscape, options: .literal, range: nil)
        let URLString = ChannelEngineMerchantApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: merchantShipmentTrackingRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ApiResponse>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
