//
// NotificationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class NotificationAPI {
    /**
     * enum for parameter types
     */
    public enum Types_notificationIndex: String { 
        case failedConversion = "FAILED_CONVERSION"
        case failedFeedValidation = "FAILED_FEED_VALIDATION"
        case invalidSetting = "INVALID_SETTING"
        case message = "MESSAGE"
        case orderCorrection = "ORDER_CORRECTION"
        case failedOrderExport = "FAILED_ORDER_EXPORT"
        case orderOverdue = "ORDER_OVERDUE"
        case orderDuplicateLines = "ORDER_DUPLICATE_LINES"
        case ordersAnonymizedByRequest = "ORDERS_ANONYMIZED_BY_REQUEST"
        case ordersAnonymizedAutomatically = "ORDERS_ANONYMIZED_AUTOMATICALLY"
        case returnOverdue = "RETURN_OVERDUE"
        case failedShipmentExport = "FAILED_SHIPMENT_EXPORT"
        case failedReturnImport = "FAILED_RETURN_IMPORT"
    }

    /**
     Get Notifications
     
     - parameter fromDate: (query) Filter on the notification date, starting from this date. This date is inclusive. (optional)
     - parameter toDate: (query) Filter on the notification date, until this date. This date is exclusive. (optional)
     - parameter types: (query) Notification type(s) to filter on (optional)
     - parameter merchantOrderNos: (query) Filter on unique order reference used by the merchant (optional)
     - parameter channelOrderNos: (query) Filter on unique order reference used by the channel (optional)
     - parameter merchantReturnNos: (query) Filter on unique return reference used by the merchant (optional)
     - parameter channelReturnNos: (query) Filter on unique return reference used by the channel (optional)
     - parameter merchantShipmentNos: (query) Filter on unique shipment reference used by the merchant (optional)
     - parameter page: (query) The page to filter on. Starts at 1. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationIndex(fromDate: Date? = nil, toDate: Date? = nil, types: [String]? = nil, merchantOrderNos: [String]? = nil, channelOrderNos: [String]? = nil, merchantReturnNos: [String]? = nil, channelReturnNos: [String]? = nil, merchantShipmentNos: [String]? = nil, page: Int? = nil, completion: @escaping ((_ data: CollectionOfMerchantNotificationResponse?,_ error: Error?) -> Void)) {
        notificationIndexWithRequestBuilder(fromDate: fromDate, toDate: toDate, types: types, merchantOrderNos: merchantOrderNos, channelOrderNos: channelOrderNos, merchantReturnNos: merchantReturnNos, channelReturnNos: channelReturnNos, merchantShipmentNos: merchantShipmentNos, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Notifications
     - GET /v2/notifications
     - Gets all notifications based on filter
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apikey
     - examples: [{contentType=application/json, example={
  "TotalCount" : 5,
  "Message" : "Message",
  "ValidationErrors" : {
    "key" : [ "ValidationErrors", "ValidationErrors" ]
  },
  "Content" : [ {
    "Read" : true,
    "Message" : "Message",
    "CreatedAt" : "2000-01-23T04:56:07.000+00:00",
    "Id" : 0,
    "Count" : 6,
    "Subject" : "Subject"
  }, {
    "Read" : true,
    "Message" : "Message",
    "CreatedAt" : "2000-01-23T04:56:07.000+00:00",
    "Id" : 0,
    "Count" : 6,
    "Subject" : "Subject"
  } ],
  "ItemsPerPage" : 5,
  "Count" : 1,
  "StatusCode" : 2,
  "LogId" : 7,
  "Success" : true
}}]
     
     - parameter fromDate: (query) Filter on the notification date, starting from this date. This date is inclusive. (optional)
     - parameter toDate: (query) Filter on the notification date, until this date. This date is exclusive. (optional)
     - parameter types: (query) Notification type(s) to filter on (optional)
     - parameter merchantOrderNos: (query) Filter on unique order reference used by the merchant (optional)
     - parameter channelOrderNos: (query) Filter on unique order reference used by the channel (optional)
     - parameter merchantReturnNos: (query) Filter on unique return reference used by the merchant (optional)
     - parameter channelReturnNos: (query) Filter on unique return reference used by the channel (optional)
     - parameter merchantShipmentNos: (query) Filter on unique shipment reference used by the merchant (optional)
     - parameter page: (query) The page to filter on. Starts at 1. (optional)

     - returns: RequestBuilder<CollectionOfMerchantNotificationResponse> 
     */
    open class func notificationIndexWithRequestBuilder(fromDate: Date? = nil, toDate: Date? = nil, types: [String]? = nil, merchantOrderNos: [String]? = nil, channelOrderNos: [String]? = nil, merchantReturnNos: [String]? = nil, channelReturnNos: [String]? = nil, merchantShipmentNos: [String]? = nil, page: Int? = nil) -> RequestBuilder<CollectionOfMerchantNotificationResponse> {
        let path = "/v2/notifications"
        let URLString = ChannelEngineMerchantApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fromDate": fromDate?.encodeToJSON(), 
            "toDate": toDate?.encodeToJSON(), 
            "types": types, 
            "merchantOrderNos": merchantOrderNos, 
            "channelOrderNos": channelOrderNos, 
            "merchantReturnNos": merchantReturnNos, 
            "channelReturnNos": channelReturnNos, 
            "merchantShipmentNos": merchantShipmentNos, 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<CollectionOfMerchantNotificationResponse>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
