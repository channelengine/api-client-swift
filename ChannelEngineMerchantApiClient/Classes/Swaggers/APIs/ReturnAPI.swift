//
// ReturnAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ReturnAPI {
    /**
     Create Return
     
     - parameter model: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func returnDeclareForMerchant(model: MerchantReturnRequest, completion: @escaping ((_ data: ApiResponse?,_ error: Error?) -> Void)) {
        returnDeclareForMerchantWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create Return
     - POST /v2/returns/merchant
     - Mark (part of) an order as returned by the customer.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apikey
     - examples: [{contentType=application/json, example={
  "Message" : "Message",
  "ValidationErrors" : {
    "key" : [ "ValidationErrors", "ValidationErrors" ]
  },
  "StatusCode" : 0,
  "LogId" : 6,
  "Success" : true
}}]
     
     - parameter model: (body)  

     - returns: RequestBuilder<ApiResponse> 
     */
    open class func returnDeclareForMerchantWithRequestBuilder(model: MerchantReturnRequest) -> RequestBuilder<ApiResponse> {
        let path = "/v2/returns/merchant"
        let URLString = ChannelEngineMerchantApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<ApiResponse>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get Return
     
     - parameter merchantOrderNo: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func returnGetByMerchantOrderNo(merchantOrderNo: String, completion: @escaping ((_ data: CollectionOfMerchantSingleOrderReturnResponse?,_ error: Error?) -> Void)) {
        returnGetByMerchantOrderNoWithRequestBuilder(merchantOrderNo: merchantOrderNo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Return
     - GET /v2/returns/merchant/{merchantOrderNo}
     - Retrieve returns based on the supplied merchant order number. May return more than 1 result.  This call is supposed to be used by merchants. Channels should use the 'GET /v2/returns/channel'  call.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apikey
     - examples: [{contentType=application/json, example={
  "TotalCount" : 9,
  "Message" : "Message",
  "ValidationErrors" : {
    "key" : [ "ValidationErrors", "ValidationErrors" ]
  },
  "Content" : [ {
    "Status" : "IN_PROGRESS",
    "MerchantComment" : "MerchantComment",
    "RefundExclVat" : 2.3021358869347654518833223846741020679473876953125,
    "CreatedAt" : "2000-01-23T04:56:07.000+00:00",
    "MerchantReturnNo" : "MerchantReturnNo",
    "UpdatedAt" : "2000-01-23T04:56:07.000+00:00",
    "Reason" : "PRODUCT_DEFECT",
    "CustomerComment" : "CustomerComment",
    "ChannelReturnNo" : "ChannelReturnNo",
    "MerchantOrderNo" : "MerchantOrderNo",
    "Id" : 5,
    "Lines" : [ {
      "RejectedQuantity" : 6,
      "AcceptedQuantity" : 0,
      "Quantity" : 1,
      "MerchantProductNo" : "MerchantProductNo"
    }, {
      "RejectedQuantity" : 6,
      "AcceptedQuantity" : 0,
      "Quantity" : 1,
      "MerchantProductNo" : "MerchantProductNo"
    } ],
    "RefundInclVat" : 5.63737665663332876420099637471139430999755859375
  }, {
    "Status" : "IN_PROGRESS",
    "MerchantComment" : "MerchantComment",
    "RefundExclVat" : 2.3021358869347654518833223846741020679473876953125,
    "CreatedAt" : "2000-01-23T04:56:07.000+00:00",
    "MerchantReturnNo" : "MerchantReturnNo",
    "UpdatedAt" : "2000-01-23T04:56:07.000+00:00",
    "Reason" : "PRODUCT_DEFECT",
    "CustomerComment" : "CustomerComment",
    "ChannelReturnNo" : "ChannelReturnNo",
    "MerchantOrderNo" : "MerchantOrderNo",
    "Id" : 5,
    "Lines" : [ {
      "RejectedQuantity" : 6,
      "AcceptedQuantity" : 0,
      "Quantity" : 1,
      "MerchantProductNo" : "MerchantProductNo"
    }, {
      "RejectedQuantity" : 6,
      "AcceptedQuantity" : 0,
      "Quantity" : 1,
      "MerchantProductNo" : "MerchantProductNo"
    } ],
    "RefundInclVat" : 5.63737665663332876420099637471139430999755859375
  } ],
  "ItemsPerPage" : 3,
  "Count" : 7,
  "StatusCode" : 2,
  "LogId" : 4,
  "Success" : true
}}]
     
     - parameter merchantOrderNo: (path)  

     - returns: RequestBuilder<CollectionOfMerchantSingleOrderReturnResponse> 
     */
    open class func returnGetByMerchantOrderNoWithRequestBuilder(merchantOrderNo: String) -> RequestBuilder<CollectionOfMerchantSingleOrderReturnResponse> {
        var path = "/v2/returns/merchant/{merchantOrderNo}"
        let merchantOrderNoPreEscape = "\(merchantOrderNo)"
        let merchantOrderNoPostEscape = merchantOrderNoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{merchantOrderNo}", with: merchantOrderNoPostEscape, options: .literal, range: nil)
        let URLString = ChannelEngineMerchantApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<CollectionOfMerchantSingleOrderReturnResponse>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter statuses
     */
    public enum Statuses_returnGetDeclaredByChannel: String { 
        case inProgress = "IN_PROGRESS"
        case received = "RECEIVED"
        case cancelled = "CANCELLED"
    }

    /**
     * enum for parameter reasons
     */
    public enum Reasons_returnGetDeclaredByChannel: String { 
        case productDefect = "PRODUCT_DEFECT"
        case productUnsatisfactory = "PRODUCT_UNSATISFACTORY"
        case wrongProduct = "WRONG_PRODUCT"
        case tooManyProducts = "TOO_MANY_PRODUCTS"
        case refused = "REFUSED"
        case refusedDamaged = "REFUSED_DAMAGED"
        case wrongAddress = "WRONG_ADDRESS"
        case notCollected = "NOT_COLLECTED"
        case wrongSize = "WRONG_SIZE"
        case other = "OTHER"
    }

    /**
     Get Returns
     
     - parameter merchantOrderNos: (query) Filter on unique order reference used by the merchant (optional)
     - parameter createdSince: (query) Deprecated, please use FromDate instead. (optional)
     - parameter statuses: (query) Return status(es) to filter on (optional)
     - parameter reasons: (query) Return reason(s) to filter on (optional)
     - parameter fromDate: (query) Filter on the creation date, starting from this date. This date is inclusive. (optional)
     - parameter toDate: (query) Filter on the creation date, until this date. This date is exclusive. (optional)
     - parameter page: (query) The page to filter on. Starts at 1. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func returnGetDeclaredByChannel(merchantOrderNos: [String]? = nil, createdSince: Date? = nil, statuses: [String]? = nil, reasons: [String]? = nil, fromDate: Date? = nil, toDate: Date? = nil, page: Int? = nil, completion: @escaping ((_ data: CollectionOfMerchantReturnResponse?,_ error: Error?) -> Void)) {
        returnGetDeclaredByChannelWithRequestBuilder(merchantOrderNos: merchantOrderNos, createdSince: createdSince, statuses: statuses, reasons: reasons, fromDate: fromDate, toDate: toDate, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Returns
     - GET /v2/returns/merchant
     - Get all returns created by the channel. This call is supposed  to be used by merchants. Channels should use the 'GET /v2/returns/channel'  call.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apikey
     - examples: [{contentType=application/json, example={
  "TotalCount" : 2,
  "Message" : "Message",
  "ValidationErrors" : {
    "key" : [ "ValidationErrors", "ValidationErrors" ]
  },
  "Content" : [ {
    "MerchantComment" : "MerchantComment",
    "RefundExclVat" : 5.962133916683182377482808078639209270477294921875,
    "CustomerComment" : "CustomerComment",
    "CreatedAt" : "2000-01-23T04:56:07.000+00:00",
    "MerchantReturnNo" : "MerchantReturnNo",
    "ChannelReturnNo" : "ChannelReturnNo",
    "MerchantOrderNo" : "MerchantOrderNo",
    "Id" : 6,
    "UpdatedAt" : "2000-01-23T04:56:07.000+00:00",
    "Reason" : "PRODUCT_DEFECT",
    "Lines" : [ {
      "Quantity" : 0,
      "MerchantProductNo" : "MerchantProductNo"
    }, {
      "Quantity" : 0,
      "MerchantProductNo" : "MerchantProductNo"
    } ],
    "RefundInclVat" : 1.46581298050294517310021547018550336360931396484375
  }, {
    "MerchantComment" : "MerchantComment",
    "RefundExclVat" : 5.962133916683182377482808078639209270477294921875,
    "CustomerComment" : "CustomerComment",
    "CreatedAt" : "2000-01-23T04:56:07.000+00:00",
    "MerchantReturnNo" : "MerchantReturnNo",
    "ChannelReturnNo" : "ChannelReturnNo",
    "MerchantOrderNo" : "MerchantOrderNo",
    "Id" : 6,
    "UpdatedAt" : "2000-01-23T04:56:07.000+00:00",
    "Reason" : "PRODUCT_DEFECT",
    "Lines" : [ {
      "Quantity" : 0,
      "MerchantProductNo" : "MerchantProductNo"
    }, {
      "Quantity" : 0,
      "MerchantProductNo" : "MerchantProductNo"
    } ],
    "RefundInclVat" : 1.46581298050294517310021547018550336360931396484375
  } ],
  "ItemsPerPage" : 7,
  "Count" : 5,
  "StatusCode" : 9,
  "LogId" : 3,
  "Success" : true
}}]
     
     - parameter merchantOrderNos: (query) Filter on unique order reference used by the merchant (optional)
     - parameter createdSince: (query) Deprecated, please use FromDate instead. (optional)
     - parameter statuses: (query) Return status(es) to filter on (optional)
     - parameter reasons: (query) Return reason(s) to filter on (optional)
     - parameter fromDate: (query) Filter on the creation date, starting from this date. This date is inclusive. (optional)
     - parameter toDate: (query) Filter on the creation date, until this date. This date is exclusive. (optional)
     - parameter page: (query) The page to filter on. Starts at 1. (optional)

     - returns: RequestBuilder<CollectionOfMerchantReturnResponse> 
     */
    open class func returnGetDeclaredByChannelWithRequestBuilder(merchantOrderNos: [String]? = nil, createdSince: Date? = nil, statuses: [String]? = nil, reasons: [String]? = nil, fromDate: Date? = nil, toDate: Date? = nil, page: Int? = nil) -> RequestBuilder<CollectionOfMerchantReturnResponse> {
        let path = "/v2/returns/merchant"
        let URLString = ChannelEngineMerchantApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "merchantOrderNos": merchantOrderNos, 
            "createdSince": createdSince?.encodeToJSON(), 
            "statuses": statuses, 
            "reasons": reasons, 
            "fromDate": fromDate?.encodeToJSON(), 
            "toDate": toDate?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<CollectionOfMerchantReturnResponse>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Unhandled Returns
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func returnGetUnhandled(completion: @escaping ((_ data: CollectionOfMerchantReturnResponse?,_ error: Error?) -> Void)) {
        returnGetUnhandledWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Unhandled Returns
     - GET /v2/returns/merchant/new
     - Get all new / unhandled returns created by channels. This call is supposed  to be used by merchants. Channels should use the 'GET /v2/returns/channel'  call.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apikey
     - examples: [{contentType=application/json, example={
  "TotalCount" : 2,
  "Message" : "Message",
  "ValidationErrors" : {
    "key" : [ "ValidationErrors", "ValidationErrors" ]
  },
  "Content" : [ {
    "MerchantComment" : "MerchantComment",
    "RefundExclVat" : 5.962133916683182377482808078639209270477294921875,
    "CustomerComment" : "CustomerComment",
    "CreatedAt" : "2000-01-23T04:56:07.000+00:00",
    "MerchantReturnNo" : "MerchantReturnNo",
    "ChannelReturnNo" : "ChannelReturnNo",
    "MerchantOrderNo" : "MerchantOrderNo",
    "Id" : 6,
    "UpdatedAt" : "2000-01-23T04:56:07.000+00:00",
    "Reason" : "PRODUCT_DEFECT",
    "Lines" : [ {
      "Quantity" : 0,
      "MerchantProductNo" : "MerchantProductNo"
    }, {
      "Quantity" : 0,
      "MerchantProductNo" : "MerchantProductNo"
    } ],
    "RefundInclVat" : 1.46581298050294517310021547018550336360931396484375
  }, {
    "MerchantComment" : "MerchantComment",
    "RefundExclVat" : 5.962133916683182377482808078639209270477294921875,
    "CustomerComment" : "CustomerComment",
    "CreatedAt" : "2000-01-23T04:56:07.000+00:00",
    "MerchantReturnNo" : "MerchantReturnNo",
    "ChannelReturnNo" : "ChannelReturnNo",
    "MerchantOrderNo" : "MerchantOrderNo",
    "Id" : 6,
    "UpdatedAt" : "2000-01-23T04:56:07.000+00:00",
    "Reason" : "PRODUCT_DEFECT",
    "Lines" : [ {
      "Quantity" : 0,
      "MerchantProductNo" : "MerchantProductNo"
    }, {
      "Quantity" : 0,
      "MerchantProductNo" : "MerchantProductNo"
    } ],
    "RefundInclVat" : 1.46581298050294517310021547018550336360931396484375
  } ],
  "ItemsPerPage" : 7,
  "Count" : 5,
  "StatusCode" : 9,
  "LogId" : 3,
  "Success" : true
}}]

     - returns: RequestBuilder<CollectionOfMerchantReturnResponse> 
     */
    open class func returnGetUnhandledWithRequestBuilder() -> RequestBuilder<CollectionOfMerchantReturnResponse> {
        let path = "/v2/returns/merchant/new"
        let URLString = ChannelEngineMerchantApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<CollectionOfMerchantReturnResponse>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Mark a return as received
     
     - parameter model: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func returnUpdateForMerchant(model: MerchantReturnUpdateRequest, completion: @escaping ((_ data: ApiResponse?,_ error: Error?) -> Void)) {
        returnUpdateForMerchantWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Mark a return as received
     - PUT /v2/returns
     - Mark a return as received
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apikey
     - examples: [{contentType=application/json, example={
  "Message" : "Message",
  "ValidationErrors" : {
    "key" : [ "ValidationErrors", "ValidationErrors" ]
  },
  "StatusCode" : 0,
  "LogId" : 6,
  "Success" : true
}}]
     
     - parameter model: (body)  

     - returns: RequestBuilder<ApiResponse> 
     */
    open class func returnUpdateForMerchantWithRequestBuilder(model: MerchantReturnUpdateRequest) -> RequestBuilder<ApiResponse> {
        let path = "/v2/returns"
        let URLString = ChannelEngineMerchantApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<ApiResponse>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
